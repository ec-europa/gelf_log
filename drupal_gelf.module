<?php

/* watchdog hooking */
function drupal_gelf_watchdog(array $error) {
	/* get the config from drupal */
	$host = variable_get('drupal_gelf_host', 'localhost');
	$port = variable_get('drupal_gelf_port', '12201');
	/* format the packet from drupal error format */
	$errorPacket = drupal_gelf_format_error($error);
	/* chunk and send the GELF UDP packet */
	drupal_gelf_send_packet($host,$port,$errorPacket);
}



// format an array with messages according GELF specs

function drupal_gelf_format_error(array $error) {
	//move all drupal stuff in _ (additionals for gelf)
	foreach($error as $error_key => $error_value) {
		unset($error[$error_key]);
		$error['_'.$error_key] = $error_value;
	}
  	$error['_application'] = 'drupal_gelf';
  	$error['_website'] =  variable_get('site_name','localhost');
	//merge a formated GELF error + drupal error
	return array_merge(
		array(
		/* GELF required fields : */
		'version' => '1.1',
		'host' => gethostname(),
		'short_message' => $error['_message'],
		'level' => $error['_severity'],
		'timestamp' => time()
		),
		$error
	);
}

// generate an $max bytes unique BINARY string :
function drupal_gelf_get_unique_id($max) {
	$bytes = '';
	/* while not enough random bytes */
	while(strlen($bytes) < $max) {
		/* add one */
		$bytes .= chr(mt_rand(0,255));
	}
	/* and return the payload */
	return $bytes;
}

//Process the packet, chunk it and sends it
function drupal_gelf_send_packet($host,$port,array $error_event) {
	/* JSONify and compress the packet */
	$packet = gzcompress(json_encode($error_event));
	/* split it in max 512 bytes chunks, 512 will avoid packet getting drop on low MTUs */
	$chunks = str_split($packet,512); //512 is a safe value
	$total_chunks = count($chunks);
	$uniqid = drupal_gelf_get_unique_id(8);
	/* open a UDP sending socket */
	$socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
	/* and send packets 1 by 1, there's no support for non-chunked packet, who cares ? */
	foreach($chunks as $index => $chunk) {
    		//create UDP packet according GELF specs :
		$udpPacket =  implode('', array("\x1e\x0f" , $uniqid , chr($index) , chr($total_chunks) ,$chunk));
		//and send it :
		socket_sendto($socket, $udpPacket, strlen($udpPacket), 0, $host, $port);
	}
	socket_close($socket);
}
